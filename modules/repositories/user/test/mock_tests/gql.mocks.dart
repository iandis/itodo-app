// Mocks generated by Mockito 5.0.17 from annotations
// in todo/test/mock_tests/gql.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:gql/ast.dart' as _i4;
import 'package:graphql/client.dart' as _i3;
import 'package:graphql/src/core/_data_class.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:network/src/gql_auth.dart' as _i2;
import 'package:network/src/gql_client.dart' as _i5;

import 'helpers.dart';

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGQLAuth_0 extends _i1.Fake implements _i2.GQLAuth {}

class _FakeQueryResult_1 extends _i1.Fake implements _i3.QueryResult {}

class _FakeDocumentNode_2 extends _i1.Fake implements _i4.DocumentNode {}

class _FakePolicies_3 extends _i1.Fake implements _i3.Policies {}

class _FakeContext_4 extends _i1.Fake implements _i3.Context {}

class _FakeRequest_5 extends _i1.Fake implements _i3.Request {}

class _FakeWatchQueryOptions_6 extends _i1.Fake
    implements _i3.WatchQueryOptions {}

/// A class which mocks [GQLClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGQLClient extends _i1.Mock implements _i5.GQLClient {
  MockGQLClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  _i2.GQLAuth get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeGQLAuth_0()) as _i2.GQLAuth);
  @override
  _i6.Future<_i3.QueryResult> query(_i3.QueryOptions? options) =>
      (super.noSuchMethod(Invocation.method(#query, [options]),
              returnValue: Future<_i3.QueryResult>.value(_FakeQueryResult_1()))
          as _i6.Future<_i3.QueryResult>);
  @override
  _i6.Future<_i3.QueryResult> mutate(_i3.MutationOptions? options) =>
      (super.noSuchMethod(Invocation.method(#mutate, [options]),
              returnValue: Future<_i3.QueryResult>.value(_FakeQueryResult_1()))
          as _i6.Future<_i3.QueryResult>);
}

/// A class which mocks [MutationOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockMutationOptions extends _i1.Mock implements _i3.MutationOptions {
  MockMutationOptions({
    Map<String, dynamic> variables = const {},
  }) : _variables = variables {
    _i1.throwOnMissingStub(this);
  }

  final Map<String, dynamic> _variables;

  @override
  List<Object?> get properties =>
      (super.noSuchMethod(Invocation.getter(#properties),
          returnValue: <Object?>[]) as List<Object?>);
  @override
  _i4.DocumentNode get document =>
      (super.noSuchMethod(Invocation.getter(#document),
          returnValue: _FakeDocumentNode_2()) as _i4.DocumentNode);
  @override
  set document(_i4.DocumentNode? _document) =>
      super.noSuchMethod(Invocation.setter(#document, _document),
          returnValueForMissingStub: null);
  @override
  set operationName(String? _operationName) =>
      super.noSuchMethod(Invocation.setter(#operationName, _operationName),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get variables => _variables;

  @override
  set variables(Map<String, dynamic>? _variables) =>
      super.noSuchMethod(Invocation.setter(#variables, _variables),
          returnValueForMissingStub: null);
  @override
  set optimisticResult(Object? _optimisticResult) => super.noSuchMethod(
      Invocation.setter(#optimisticResult, _optimisticResult),
      returnValueForMissingStub: null);
  @override
  _i3.Policies get policies => (super.noSuchMethod(Invocation.getter(#policies),
      returnValue: _FakePolicies_3()) as _i3.Policies);
  @override
  set policies(_i3.Policies? _policies) =>
      super.noSuchMethod(Invocation.setter(#policies, _policies),
          returnValueForMissingStub: null);
  @override
  _i3.Context get context => (super.noSuchMethod(Invocation.getter(#context),
      returnValue: _FakeContext_4()) as _i3.Context);
  @override
  set context(_i3.Context? _context) =>
      super.noSuchMethod(Invocation.setter(#context, _context),
          returnValueForMissingStub: null);
  @override
  _i3.Request get asRequest =>
      (super.noSuchMethod(Invocation.getter(#asRequest),
          returnValue: _FakeRequest_5()) as _i3.Request);
  @override
  _i4.OperationType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i4.OperationType.query) as _i4.OperationType);
  @override
  bool get isQuery =>
      (super.noSuchMethod(Invocation.getter(#isQuery), returnValue: false)
          as bool);
  @override
  bool get isMutation =>
      (super.noSuchMethod(Invocation.getter(#isMutation), returnValue: false)
          as bool);
  @override
  bool get isSubscription => (super
          .noSuchMethod(Invocation.getter(#isSubscription), returnValue: false)
      as bool);
  @override
  bool equal(_i7.MutableDataClass? other) => (super
          .noSuchMethod(Invocation.method(#equal, [other]), returnValue: false)
      as bool);

  @override
  bool operator ==(Object? other) {
    return identical(this, other) ||
        other is _i3.MutationOptions && mapEquals(variables, other.variables);
  }

  @override
  int get hashCode => variables.hashCode;
}

/// A class which mocks [QueryOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryOptions extends _i1.Mock implements _i3.QueryOptions {
  MockQueryOptions({
    Map<String, dynamic> variables = const {},
  }) : _variables = variables {
    _i1.throwOnMissingStub(this);
  }

  final Map<String, dynamic> _variables;

  @override
  set pollInterval(Duration? _pollInterval) =>
      super.noSuchMethod(Invocation.setter(#pollInterval, _pollInterval),
          returnValueForMissingStub: null);
  @override
  List<Object?> get properties =>
      (super.noSuchMethod(Invocation.getter(#properties),
          returnValue: <Object?>[]) as List<Object?>);
  @override
  _i4.DocumentNode get document =>
      (super.noSuchMethod(Invocation.getter(#document),
          returnValue: _FakeDocumentNode_2()) as _i4.DocumentNode);
  @override
  set document(_i4.DocumentNode? _document) =>
      super.noSuchMethod(Invocation.setter(#document, _document),
          returnValueForMissingStub: null);
  @override
  set operationName(String? _operationName) =>
      super.noSuchMethod(Invocation.setter(#operationName, _operationName),
          returnValueForMissingStub: null);

  @override
  Map<String, dynamic> get variables => _variables;

  @override
  set variables(Map<String, dynamic>? _variables) =>
      super.noSuchMethod(Invocation.setter(#variables, _variables),
          returnValueForMissingStub: null);
  @override
  set optimisticResult(Object? _optimisticResult) => super.noSuchMethod(
      Invocation.setter(#optimisticResult, _optimisticResult),
      returnValueForMissingStub: null);
  @override
  _i3.Policies get policies => (super.noSuchMethod(Invocation.getter(#policies),
      returnValue: _FakePolicies_3()) as _i3.Policies);
  @override
  set policies(_i3.Policies? _policies) =>
      super.noSuchMethod(Invocation.setter(#policies, _policies),
          returnValueForMissingStub: null);
  @override
  _i3.Context get context => (super.noSuchMethod(Invocation.getter(#context),
      returnValue: _FakeContext_4()) as _i3.Context);
  @override
  set context(_i3.Context? _context) =>
      super.noSuchMethod(Invocation.setter(#context, _context),
          returnValueForMissingStub: null);
  @override
  _i3.Request get asRequest =>
      (super.noSuchMethod(Invocation.getter(#asRequest),
          returnValue: _FakeRequest_5()) as _i3.Request);
  @override
  _i4.OperationType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i4.OperationType.query) as _i4.OperationType);
  @override
  bool get isQuery =>
      (super.noSuchMethod(Invocation.getter(#isQuery), returnValue: false)
          as bool);
  @override
  bool get isMutation =>
      (super.noSuchMethod(Invocation.getter(#isMutation), returnValue: false)
          as bool);
  @override
  bool get isSubscription => (super
          .noSuchMethod(Invocation.getter(#isSubscription), returnValue: false)
      as bool);
  @override
  _i3.WatchQueryOptions asWatchQueryOptions({bool? fetchResults = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #asWatchQueryOptions, [], {#fetchResults: fetchResults}),
          returnValue: _FakeWatchQueryOptions_6()) as _i3.WatchQueryOptions);

  @override
  bool equal(_i7.MutableDataClass? other) => (super
          .noSuchMethod(Invocation.method(#equal, [other]), returnValue: false)
      as bool);

  @override
  bool operator ==(Object? other) {
    return identical(this, other) ||
        other is _i3.QueryOptions && mapEquals(variables, other.variables);
  }

  @override
  int get hashCode => variables.hashCode;
}
